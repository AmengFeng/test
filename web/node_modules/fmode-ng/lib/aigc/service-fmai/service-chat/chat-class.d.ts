import { Observable } from "rxjs";
import Parse from "parse";
export declare function getMessageContentText(content: any | string | Array<ChatImageContentItem>): string;
export declare function getMessageImageUrl(content: any | string | Array<ChatImageContentItem>): any;
export interface ChatImageContentItem {
    type: string;
    text?: string;
    image_url?: {
        url: string;
    };
}
export interface FmodeChatMessage {
    role: string;
    content: string | Array<ChatImageContentItem>;
    json?: any;
    hidden?: boolean;
    createdAt?: Date;
    complete?: boolean;
    /**AI回复消息字段 */
    cid?: string;
}
/**
 * FmodeChat 聊天对话类
 * @public
 */
export declare class FmodeChat {
    title: string;
    sessionId: string;
    ChatSession: any;
    chatSession: Parse.Object;
    role: any;
    messageList: FmodeChatMessage[];
    chatServ: any;
    userInput: string;
    userImage: string;
    constructor(sessionId: string, role?: Parse.Object, chatSession?: Parse.Object, chatServ?: any);
    addRolePrompt(): void;
    sendMessage(message?: string, imageUrl?: string): void;
    saveChatSession(): Promise<void>;
    getInviteUrl(url: any): any;
    genTitle(): string;
    fixMessageList(messages: FmodeChatMessage[]): {
        role: string;
        content: string | ChatImageContentItem[];
    }[];
    nowStr(): string;
}
/**
 * FmodeChatCompletion 文本补全类
 * @public
 */
export declare class FmodeChatCompletion {
    indexOfList: number;
    model: string;
    messages: FmodeChatMessage[];
    content: string;
    contentBuffer: string[];
    contentPusher: any;
    isCompleted: boolean;
    constructor(messages: FmodeChatMessage[], options?: {
        model?: string;
    });
    /**
     * @param options
     * @param options.isDirect 是否不等待逐字获取，直接完成内容推送
     * @param options.intTime 是否不等待逐字获取，直接完成内容推送
     * @returns
     */
    sendCompletion(options?: {
        isDirect?: boolean;
        intTime?: number;
    }): Observable<FmodeChatMessage>;
}
